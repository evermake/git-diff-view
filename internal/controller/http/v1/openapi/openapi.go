// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for LineDiffOperation.
const (
	LineDiffOperationA LineDiffOperation = "A"
	LineDiffOperationD LineDiffOperation = "D"
	LineDiffOperationM LineDiffOperation = "M"
)

// Defines values for StatusType.
const (
	StatusTypeA StatusType = "A"
	StatusTypeC StatusType = "C"
	StatusTypeD StatusType = "D"
	StatusTypeM StatusType = "M"
	StatusTypeR StatusType = "R"
	StatusTypeT StatusType = "T"
	StatusTypeU StatusType = "U"
	StatusTypeX StatusType = "X"
)

// BranchPreview defines model for BranchPreview.
type BranchPreview struct {
	Name string `json:"name"`
}

// CommitPreview defines model for CommitPreview.
type CommitPreview struct {
	Message string `json:"message"`
	Sha1    string `json:"sha1"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// FileDiff defines model for FileDiff.
type FileDiff struct {
	Dst      State  `json:"dst"`
	IsBinary bool   `json:"isBinary"`
	Lines    Range  `json:"lines"`
	Src      State  `json:"src"`
	Status   Status `json:"status"`
}

// LineDiff defines model for LineDiff.
type LineDiff struct {
	Dst       LineState         `json:"dst"`
	Operation LineDiffOperation `json:"operation"`
	Src       LineState         `json:"src"`
}

// LineDiffOperation defines model for LineDiff.Operation.
type LineDiffOperation string

// LineState defines model for LineState.
type LineState struct {
	Content string `json:"content"`
	Number  int64  `json:"number"`
}

// Range defines model for Range.
type Range struct {
	End   int `json:"end"`
	Start int `json:"start"`
}

// State defines model for State.
type State struct {
	Path string `json:"path"`
}

// Status defines model for Status.
type Status struct {
	Score *int       `json:"score,omitempty"`
	Type  StatusType `json:"type"`
}

// StatusType defines model for Status.Type.
type StatusType string

// GetRepoDiffMapParams defines parameters for GetRepoDiffMap.
type GetRepoDiffMapParams struct {
	// A First commit
	A string `form:"a" json:"a"`

	// B Second commit
	B string `form:"b" json:"b"`
}

// GetRepoDiffPartParams defines parameters for GetRepoDiffPart.
type GetRepoDiffPartParams struct {
	// A First commit
	A string `form:"a" json:"a"`

	// B Second commit
	B string `form:"b" json:"b"`

	// Start Start line of the diff
	Start int `form:"start" json:"start"`

	// End End line for the diff
	End int `form:"end" json:"end"`
}

// GetRepoFileParams defines parameters for GetRepoFile.
type GetRepoFileParams struct {
	// Revision Revision of the file
	Revision *string `form:"revision,omitempty" json:"revision,omitempty"`

	// Path Path to the file
	Path string `form:"path" json:"path"`

	// Start Start line number. Defaults to 0 if omitted. Using a value that is out of bounds will be rounded to the closest bound.
	Start *int `form:"start,omitempty" json:"start,omitempty"`

	// End End line number. Defaults to the last line of the file if omitted. Using a value that is out of bounds will be rounded to the closest bound.
	End *int `form:"end,omitempty" json:"end,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get repo branches
	// (GET /repo/branches)
	GetRepoBranches(ctx echo.Context) error
	// Get branch commits
	// (GET /repo/branches/{branch}/commits)
	GetRepoBranchesBranchCommits(ctx echo.Context, branch string) error
	// Calculate the difference between 'a' and 'b' for mapping.
	// (GET /repo/diff/map)
	GetRepoDiffMap(ctx echo.Context, params GetRepoDiffMapParams) error
	// Get information about partial diff between a and b for given startline and endline
	// (GET /repo/diff/part)
	GetRepoDiffPart(ctx echo.Context, params GetRepoDiffPartParams) error
	// Get file contents
	// (GET /repo/file)
	GetRepoFile(ctx echo.Context, params GetRepoFileParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetRepoBranches converts echo context to params.
func (w *ServerInterfaceWrapper) GetRepoBranches(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRepoBranches(ctx)
	return err
}

// GetRepoBranchesBranchCommits converts echo context to params.
func (w *ServerInterfaceWrapper) GetRepoBranchesBranchCommits(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "branch" -------------
	var branch string

	err = runtime.BindStyledParameterWithLocation("simple", false, "branch", runtime.ParamLocationPath, ctx.Param("branch"), &branch)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRepoBranchesBranchCommits(ctx, branch)
	return err
}

// GetRepoDiffMap converts echo context to params.
func (w *ServerInterfaceWrapper) GetRepoDiffMap(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRepoDiffMapParams
	// ------------- Required query parameter "a" -------------

	err = runtime.BindQueryParameter("form", true, true, "a", ctx.QueryParams(), &params.A)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
	}

	// ------------- Required query parameter "b" -------------

	err = runtime.BindQueryParameter("form", true, true, "b", ctx.QueryParams(), &params.B)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter b: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRepoDiffMap(ctx, params)
	return err
}

// GetRepoDiffPart converts echo context to params.
func (w *ServerInterfaceWrapper) GetRepoDiffPart(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRepoDiffPartParams
	// ------------- Required query parameter "a" -------------

	err = runtime.BindQueryParameter("form", true, true, "a", ctx.QueryParams(), &params.A)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
	}

	// ------------- Required query parameter "b" -------------

	err = runtime.BindQueryParameter("form", true, true, "b", ctx.QueryParams(), &params.B)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter b: %s", err))
	}

	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRepoDiffPart(ctx, params)
	return err
}

// GetRepoFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetRepoFile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRepoFileParams
	// ------------- Optional query parameter "revision" -------------

	err = runtime.BindQueryParameter("form", true, false, "revision", ctx.QueryParams(), &params.Revision)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
	}

	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRepoFile(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/repo/branches", wrapper.GetRepoBranches)
	router.GET(baseURL+"/repo/branches/:branch/commits", wrapper.GetRepoBranchesBranchCommits)
	router.GET(baseURL+"/repo/diff/map", wrapper.GetRepoDiffMap)
	router.GET(baseURL+"/repo/diff/part", wrapper.GetRepoDiffPart)
	router.GET(baseURL+"/repo/file", wrapper.GetRepoFile)

}

type ErrorJSONResponse Error

type GetRepoBranchesRequestObject struct {
}

type GetRepoBranchesResponseObject interface {
	VisitGetRepoBranchesResponse(w http.ResponseWriter) error
}

type GetRepoBranches200JSONResponse []BranchPreview

func (response GetRepoBranches200JSONResponse) VisitGetRepoBranchesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoBranches400JSONResponse struct{ ErrorJSONResponse }

func (response GetRepoBranches400JSONResponse) VisitGetRepoBranchesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoBranchesBranchCommitsRequestObject struct {
	Branch string `json:"branch"`
}

type GetRepoBranchesBranchCommitsResponseObject interface {
	VisitGetRepoBranchesBranchCommitsResponse(w http.ResponseWriter) error
}

type GetRepoBranchesBranchCommits200JSONResponse []CommitPreview

func (response GetRepoBranchesBranchCommits200JSONResponse) VisitGetRepoBranchesBranchCommitsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoDiffMapRequestObject struct {
	Params GetRepoDiffMapParams
}

type GetRepoDiffMapResponseObject interface {
	VisitGetRepoDiffMapResponse(w http.ResponseWriter) error
}

type GetRepoDiffMap200JSONResponse struct {
	Files      []FileDiff `json:"files"`
	LinesTotal int        `json:"linesTotal"`
}

func (response GetRepoDiffMap200JSONResponse) VisitGetRepoDiffMapResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoDiffMap400JSONResponse struct{ ErrorJSONResponse }

func (response GetRepoDiffMap400JSONResponse) VisitGetRepoDiffMapResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoDiffPartRequestObject struct {
	Params GetRepoDiffPartParams
}

type GetRepoDiffPartResponseObject interface {
	VisitGetRepoDiffPartResponse(w http.ResponseWriter) error
}

type GetRepoDiffPart200JSONResponse []LineDiff

func (response GetRepoDiffPart200JSONResponse) VisitGetRepoDiffPartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoDiffPart400JSONResponse struct{ ErrorJSONResponse }

func (response GetRepoDiffPart400JSONResponse) VisitGetRepoDiffPartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoFileRequestObject struct {
	Params GetRepoFileParams
}

type GetRepoFileResponseObject interface {
	VisitGetRepoFileResponse(w http.ResponseWriter) error
}

type GetRepoFile200JSONResponse []string

func (response GetRepoFile200JSONResponse) VisitGetRepoFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRepoFile400JSONResponse struct{ ErrorJSONResponse }

func (response GetRepoFile400JSONResponse) VisitGetRepoFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get repo branches
	// (GET /repo/branches)
	GetRepoBranches(ctx context.Context, request GetRepoBranchesRequestObject) (GetRepoBranchesResponseObject, error)
	// Get branch commits
	// (GET /repo/branches/{branch}/commits)
	GetRepoBranchesBranchCommits(ctx context.Context, request GetRepoBranchesBranchCommitsRequestObject) (GetRepoBranchesBranchCommitsResponseObject, error)
	// Calculate the difference between 'a' and 'b' for mapping.
	// (GET /repo/diff/map)
	GetRepoDiffMap(ctx context.Context, request GetRepoDiffMapRequestObject) (GetRepoDiffMapResponseObject, error)
	// Get information about partial diff between a and b for given startline and endline
	// (GET /repo/diff/part)
	GetRepoDiffPart(ctx context.Context, request GetRepoDiffPartRequestObject) (GetRepoDiffPartResponseObject, error)
	// Get file contents
	// (GET /repo/file)
	GetRepoFile(ctx context.Context, request GetRepoFileRequestObject) (GetRepoFileResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetRepoBranches operation middleware
func (sh *strictHandler) GetRepoBranches(ctx echo.Context) error {
	var request GetRepoBranchesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoBranches(ctx.Request().Context(), request.(GetRepoBranchesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoBranches")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRepoBranchesResponseObject); ok {
		return validResponse.VisitGetRepoBranchesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRepoBranchesBranchCommits operation middleware
func (sh *strictHandler) GetRepoBranchesBranchCommits(ctx echo.Context, branch string) error {
	var request GetRepoBranchesBranchCommitsRequestObject

	request.Branch = branch

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoBranchesBranchCommits(ctx.Request().Context(), request.(GetRepoBranchesBranchCommitsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoBranchesBranchCommits")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRepoBranchesBranchCommitsResponseObject); ok {
		return validResponse.VisitGetRepoBranchesBranchCommitsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRepoDiffMap operation middleware
func (sh *strictHandler) GetRepoDiffMap(ctx echo.Context, params GetRepoDiffMapParams) error {
	var request GetRepoDiffMapRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoDiffMap(ctx.Request().Context(), request.(GetRepoDiffMapRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoDiffMap")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRepoDiffMapResponseObject); ok {
		return validResponse.VisitGetRepoDiffMapResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRepoDiffPart operation middleware
func (sh *strictHandler) GetRepoDiffPart(ctx echo.Context, params GetRepoDiffPartParams) error {
	var request GetRepoDiffPartRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoDiffPart(ctx.Request().Context(), request.(GetRepoDiffPartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoDiffPart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRepoDiffPartResponseObject); ok {
		return validResponse.VisitGetRepoDiffPartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRepoFile operation middleware
func (sh *strictHandler) GetRepoFile(ctx echo.Context, params GetRepoFileParams) error {
	var request GetRepoFileRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRepoFile(ctx.Request().Context(), request.(GetRepoFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRepoFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRepoFileResponseObject); ok {
		return validResponse.VisitGetRepoFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xX32/bNhD+V4jbgLwQtrMVe/BbfnUrsAJB2gIDuj6cpJPNQiRVkkoWBP7fhyMlRbaU",
	"yFmLPOzJkkjed/fdd3f0A+RW19aQCR7WD+DI19Z4ii9XzlnHD7k1gUzgR6zrSuUYlDXLr94a/ubzLWnk",
	"p58dlbCGn5aPVpdp1S+Ttd1uJ6EgnztVsxFYwzkWwtG3hnwAXm0PsL1zhybfXju6VXTHH2pna3JBJQcN",
	"auLfcF8TrMEHp8wm2mB7ylEB689p1xfZ7bLZV8oD7CRcWK1VeNK6Ju9xMwUgwW/xlBdK6zQGXuIPcsaT",
	"dlNneMqnnvNjfTmAeM72W1XRpSrLsfnCh7n0fQgYiK0of64MuvuBL5m1FaHh1UqZZPI5WzdoNtGWd/nR",
	"uD5gaPwx2xs/Zj59Togyxtv5OohoirQ/lfnvpPHhPgA+i0nzD0Cm0ezYe5BwBhIuB+ADmc3zM4A4iPkR",
	"bxj2UzEmG6MgB6U/8s40OiO3VwbKhN/ePNaBMoE25MYlmU7K3vyUV0klI4/IFANveoQoEBemlsZacJx+",
	"NjSF+wQTNYbtfP3FXU9ZTfLdN+tz6yKaxn+UZlGcrlYStDLpbSUnQk1fHlXECrqIKpJRUTcg4SNI+AQS",
	"/ppQ1oHTcXXsNG9TprQxahUqXuNSEGfX70DCLTmfOvjpYrVYtRI3WCtYw6/xk4x8xDiXjmq7zGJDT5Fv",
	"KGarl+m7AtbwO4Ubqu15t0/uj6RfVqsXDSQVSM/2jP0p09ML6BzeT06szrudhDfJoyn7vef97JPgG61j",
	"8+RIBXMiek54fZ+m5UN62rFZrcLRvKXfi/YQp8GhpkDOw/rzw2Q4Is5Jzjisk4xlO2AhOQFD0QTXkBwQ",
	"fSiwL6+RuP0BfnTiREfmOCHZeEPKSKHKcqmxnksA18d7rOcof6ucDy1Mx/m3htz9I+n4Ir7lIcIHyq0p",
	"nofIXjWl+32vVFV6OCrT/dVllOR2jH+0Aasjmv9gs2x9mG58B2w2eU7el00lOg6+q/gvsMqbCgOJsCXB",
	"4iJHJieRUbgjMuIETwSaQpxkJ6K0Tmisa2U2i0NJ1u3Mm9PkdZp5/ztRjiF4ugtOs7Blz+4TWN1VYBZv",
	"IKdDwCtTJDhO0wweXzlehPYqbbS/4h7RQX90IXDT5TsG3x+VNQIz2wTBqlZYRSr7ksBYEFnkeaNuyYiY",
	"vsg9r5Ap+HlQIVzfc8XBnWWuMG7oVvFVp1NUmc5MZdi1W2GY1oJKbCq+H/9xdXY59TfxEPEaw1YEO4fW",
	"jukfUy7pUr4Ql8lbz/groUphtQqBioX45JXZCBS3WDXcuTAI5QUnzJYis40pvLhTVSUyEo5fqeiCyCvr",
	"yYe0a/G3mSnICe5W8iXFOBUM+1Gh3+8OzO4rB5m6wGtU/egv21x5cyvwezL/3uKO/Lae84Vqt/s3AAD/",
	"/7gTuJ10EgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
