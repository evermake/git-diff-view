// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for LineDiffOp.
const (
	LineDiffOpA LineDiffOp = "a"
	LineDiffOpD LineDiffOp = "d"
)

// Defines values for StatusType.
const (
	StatusTypeA StatusType = "A"
	StatusTypeC StatusType = "C"
	StatusTypeD StatusType = "D"
	StatusTypeM StatusType = "M"
	StatusTypeR StatusType = "R"
	StatusTypeT StatusType = "T"
	StatusTypeU StatusType = "U"
	StatusTypeX StatusType = "X"
)

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// FileDiff defines model for FileDiff.
type FileDiff struct {
	Dst      State  `json:"dst"`
	IsBinary bool   `json:"isBinary"`
	Lines    Range  `json:"lines"`
	Src      State  `json:"src"`
	Status   Status `json:"status"`
}

// LineDiff defines model for LineDiff.
type LineDiff struct {
	Content       string     `json:"content"`
	DstLineNumber int64      `json:"dstLineNumber"`
	Op            LineDiffOp `json:"op"`
	SrcLineNumber int64      `json:"srcLineNumber"`
}

// LineDiffOp defines model for LineDiff.Op.
type LineDiffOp string

// Range defines model for Range.
type Range struct {
	End   int `json:"end"`
	Start int `json:"start"`
}

// State defines model for State.
type State struct {
	Path string `json:"path"`
}

// Status defines model for Status.
type Status struct {
	Score *int       `json:"score,omitempty"`
	Type  StatusType `json:"type"`
}

// StatusType defines model for Status.Type.
type StatusType string

// GetDiffMapParams defines parameters for GetDiffMap.
type GetDiffMapParams struct {
	// A First commit
	A string `form:"a" json:"a"`

	// B Second commit
	B string `form:"b" json:"b"`
}

// GetDiffPartParams defines parameters for GetDiffPart.
type GetDiffPartParams struct {
	// A First commit
	A string `form:"a" json:"a"`

	// B Second commit
	B string `form:"b" json:"b"`

	// Start Start line of the diff
	Start int `form:"start" json:"start"`

	// End End line for the diff
	End int `form:"end" json:"end"`
}

// GetFileParams defines parameters for GetFile.
type GetFileParams struct {
	// Revision Revision of the file
	Revision *string `form:"revision,omitempty" json:"revision,omitempty"`

	// Path Path to the file
	Path string `form:"path" json:"path"`

	// Start Start line number
	Start *int `form:"start,omitempty" json:"start,omitempty"`

	// End End line number. Defaults to the last line of the file
	End *int `form:"end,omitempty" json:"end,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Calculate the difference between 'a' and 'b' for mapping.
	// (GET /diff/map)
	GetDiffMap(ctx echo.Context, params GetDiffMapParams) error
	// Get information about partial diff between a and b for given startline and endline
	// (GET /diff/part)
	GetDiffPart(ctx echo.Context, params GetDiffPartParams) error
	// Get file contents
	// (GET /file)
	GetFile(ctx echo.Context, params GetFileParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDiffMap converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiffMap(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiffMapParams
	// ------------- Required query parameter "a" -------------

	err = runtime.BindQueryParameter("form", true, true, "a", ctx.QueryParams(), &params.A)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
	}

	// ------------- Required query parameter "b" -------------

	err = runtime.BindQueryParameter("form", true, true, "b", ctx.QueryParams(), &params.B)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter b: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiffMap(ctx, params)
	return err
}

// GetDiffPart converts echo context to params.
func (w *ServerInterfaceWrapper) GetDiffPart(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDiffPartParams
	// ------------- Required query parameter "a" -------------

	err = runtime.BindQueryParameter("form", true, true, "a", ctx.QueryParams(), &params.A)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter a: %s", err))
	}

	// ------------- Required query parameter "b" -------------

	err = runtime.BindQueryParameter("form", true, true, "b", ctx.QueryParams(), &params.B)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter b: %s", err))
	}

	// ------------- Required query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, true, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Required query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, true, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDiffPart(ctx, params)
	return err
}

// GetFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetFile(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetFileParams
	// ------------- Optional query parameter "revision" -------------

	err = runtime.BindQueryParameter("form", true, false, "revision", ctx.QueryParams(), &params.Revision)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter revision: %s", err))
	}

	// ------------- Required query parameter "path" -------------

	err = runtime.BindQueryParameter("form", true, true, "path", ctx.QueryParams(), &params.Path)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter path: %s", err))
	}

	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFile(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/diff/map", wrapper.GetDiffMap)
	router.GET(baseURL+"/diff/part", wrapper.GetDiffPart)
	router.GET(baseURL+"/file", wrapper.GetFile)

}

type ErrorJSONResponse Error

type GetDiffMapRequestObject struct {
	Params GetDiffMapParams
}

type GetDiffMapResponseObject interface {
	VisitGetDiffMapResponse(w http.ResponseWriter) error
}

type GetDiffMap200JSONResponse struct {
	Files      []FileDiff `json:"files"`
	LinesTotal int        `json:"linesTotal"`
}

func (response GetDiffMap200JSONResponse) VisitGetDiffMapResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDiffMap400JSONResponse struct{ ErrorJSONResponse }

func (response GetDiffMap400JSONResponse) VisitGetDiffMapResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetDiffPartRequestObject struct {
	Params GetDiffPartParams
}

type GetDiffPartResponseObject interface {
	VisitGetDiffPartResponse(w http.ResponseWriter) error
}

type GetDiffPart200JSONResponse []LineDiff

func (response GetDiffPart200JSONResponse) VisitGetDiffPartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDiffPart400JSONResponse struct{ ErrorJSONResponse }

func (response GetDiffPart400JSONResponse) VisitGetDiffPartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetFileRequestObject struct {
	Params GetFileParams
}

type GetFileResponseObject interface {
	VisitGetFileResponse(w http.ResponseWriter) error
}

type GetFile200JSONResponse string

func (response GetFile200JSONResponse) VisitGetFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetFile400JSONResponse struct{ ErrorJSONResponse }

func (response GetFile400JSONResponse) VisitGetFileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Calculate the difference between 'a' and 'b' for mapping.
	// (GET /diff/map)
	GetDiffMap(ctx context.Context, request GetDiffMapRequestObject) (GetDiffMapResponseObject, error)
	// Get information about partial diff between a and b for given startline and endline
	// (GET /diff/part)
	GetDiffPart(ctx context.Context, request GetDiffPartRequestObject) (GetDiffPartResponseObject, error)
	// Get file contents
	// (GET /file)
	GetFile(ctx context.Context, request GetFileRequestObject) (GetFileResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetDiffMap operation middleware
func (sh *strictHandler) GetDiffMap(ctx echo.Context, params GetDiffMapParams) error {
	var request GetDiffMapRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDiffMap(ctx.Request().Context(), request.(GetDiffMapRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDiffMap")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDiffMapResponseObject); ok {
		return validResponse.VisitGetDiffMapResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetDiffPart operation middleware
func (sh *strictHandler) GetDiffPart(ctx echo.Context, params GetDiffPartParams) error {
	var request GetDiffPartRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDiffPart(ctx.Request().Context(), request.(GetDiffPartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDiffPart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDiffPartResponseObject); ok {
		return validResponse.VisitGetDiffPartResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetFile operation middleware
func (sh *strictHandler) GetFile(ctx echo.Context, params GetFileParams) error {
	var request GetFileRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetFile(ctx.Request().Context(), request.(GetFileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetFile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetFileResponseObject); ok {
		return validResponse.VisitGetFileResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xWUW/bNhD+K8RtQF6I2N2KPegtbdKuwDoEaQcMKPpwlk4OC5FUyVO2IPB/H460FVlS",
	"7Bhb99A3WiTvu/vu+45+gNLb1jtyHKF4gECx9S5S+nEVgg+yKL1jcixLbNvGlMjGu8WX6J18i+UtWZTV",
	"j4FqKOCHxWPURd6Nixxts9loqCiWwbQSBAp4hZUK9LWjyCC72wt7GbTBtxTY5MQsxYhrkiXftwQFRA7G",
	"rdN1CWUCVVB86g9+1ruDfvWFSoaNhjemoUtT19PwVeRjxXxgZJIoJr4yDsP9IJeV9w2hk93GuBzyUKwb",
	"dOsUK4by2biRkbv4nONdnNCyvZwRdap3l+ugojnSfjPuCdIGGhn1JAHIxd87u6LUztoHiwwFGMe/vIQe",
	"yDimNQW541s5SK6zkjFKmoOMHmPHUJ4Ye0SGb0H32Y/jjXOf4yT3b0IIuWpAxqCyyBh4bmvapSAZSaA5",
	"3KyFCW6LfHvcGenUU1GzsPbDxtKHhGbxb2OlKy+WSw3WuPxrOdfE/OWxjReg4TVouAQN70HDDWj4CBr+",
	"AA1/zrR3lHTanSYtx4yrfaracCN7IlJ1cf0ONNxRiHnSvDhfni+zuMhha6CAn9MnnfhIdS4qU9cLi0l+",
	"a0qNEh7SyHtXQQFviSX6e2zTvYCWmEKE4tPDaLK9MSGyKr21Rhpp5NvXjsI9aHBoJU8R9mOJHDrSg3k6",
	"oWOM8IFK76rDEKuTID7r/Ufgp+XypCdgXzW1afLCMNmj46ofyb10AEPA+36UfvSMzTOsMzistznMy2bE",
	"ZleWFGPdNWrHgUC/zBTMZd5T1T9vGmJnbXoR4DU2Zdcgk+JbUiIsCuRKUiviv4icOsMzha5SZ6szVfug",
	"LLatcevzFCcrsd0Oi0NSvM6D4rvT4hRCRqKS7ipf96Q+gbWbn0fxBioaA165KsNJd47gyZw+Ce3fWu1Z",
	"nupf7Imnvr3+3xIrGczyIBvvFK58x0oUbbBJVPZOwOSDVeJ5be7IqdS+xL3skKtknY0hjj7kCZkjx/xw",
	"Q3dGnoWdkOp8Z66xYXsUht2sqMaukf8Zv15dXII+Lt5r5FvF/hhaepn/K5e43d+YQwaZKWqpTzFHRjlX",
	"l/l63FXZYNx364Gys3u+oVvGtP0v6peC1TZF+R++2fwTAAD//zt5+xByDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
